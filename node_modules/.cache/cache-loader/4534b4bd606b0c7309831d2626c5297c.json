{"remainingRequest":"/Users/scott/Documents/GitHub/web/node_modules/babel-loader/lib/index.js!/Users/scott/Documents/GitHub/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/scott/Documents/GitHub/web/src/components/Bip39.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/scott/Documents/GitHub/web/src/components/Bip39.vue","mtime":1527587339385},{"path":"/Users/scott/Documents/GitHub/web/node_modules/cache-loader/dist/cjs.js","mtime":1527554738917},{"path":"/Users/scott/Documents/GitHub/web/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/scott/Documents/GitHub/web/node_modules/vue-loader/lib/index.js","mtime":1526676097000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport secp256k1 from 'secp256k1/elliptic';\nimport crypto from 'crypto';\nimport keccak from 'keccak';\nimport bip39 from 'bip39';\n\nvar bitcoin = require('bitcoinjs-lib');\n\nexport default {\n  name: 'Bip39',\n  data: function data() {\n    return {\n      msg: '',\n      title: '',\n      mnemonic: '',\n      privateKey: '',\n      publicKey: '',\n      address: '',\n      items: []\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.make();\n    console.log('begin');\n  },\n  methods: {\n    make: function make(event) {\n      //\n      var words = bip39.generateMnemonic(),\n          password = ''; //1、生成一个助记词\n\n      this.mnemonic = words; //2、该助记词使用 PBKDF2 转化为种子:\n\n      var seedHex = bip39.mnemonicToSeedHex(words); //let seedHex = bip39.mnemonicToSeedHex(words, password);\n      // 种子用于使用 HMAC-SHA512 生成根私钥:\n\n      var root = bitcoin.HDNode.fromSeedHex(seedHex);\n      var rootPrv = root.toBase58();\n      var rootPub = root.neutered().toBase58(); // 从该根私钥，导出子私钥（参见 BIP32），其中节点布局由BIP44设置，生成派生key:\n\n      var child0 = root.derivePath(\"m/44'/60'/0'/0\");\n      var privateKey = child0.keyPair.toWIF();\n      var address = child0.getAddress();\n      this.privateKey = privateKey;\n      this.address = address;\n    },\n    onCopy: function onCopy(e) {\n      alert('You just copied: ' + e.text);\n    },\n    onError: function onError(e) {\n      alert('Failed to copy texts');\n    }\n  }\n};",{"version":3,"sources":["Bip39.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,SAAA,MAAA,oBAAA;AAEA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,KAAA,MAAA,OAAA;;AACA,IAAA,UAAA,QAAA,eAAA,CAAA;;AACA,eAAA;AACA,QAAA,OADA;AAEA,MAFA,kBAEA;AACA,WAAA;AACA,WAAA,EADA;AAEA,aAAA,EAFA;AAGA,gBAAA,EAHA;AAIA,kBAAA,EAJA;AAKA,iBAAA,EALA;AAMA,eAAA,EANA;AAOA,aAAA;AAPA,KAAA;AASA,GAZA;AAaA,SAbA,qBAaA,CACA,CAdA;AAeA,SAfA,qBAeA;AACA,SAAA,IAAA;AACA,YAAA,GAAA,CAAA,OAAA;AACA,GAlBA;AAmBA,WAAA;AACA,UAAA,cAAA,KAAA,EAAA;AACA;AACA,UACA,QAAA,MAAA,gBAAA,EADA;AAAA,UAEA,WAAA,EAFA,CAFA,CAKA;;AACA,WAAA,QAAA,GAAA,KAAA,CANA,CASA;;AACA,UAAA,UAAA,MAAA,iBAAA,CAAA,KAAA,CAAA,CAVA,CAWA;AAGA;;AACA,UAAA,OAAA,QAAA,MAAA,CAAA,WAAA,CAAA,OAAA,CAAA;AACA,UAAA,UAAA,KAAA,QAAA,EAAA;AACA,UAAA,UAAA,KAAA,QAAA,GAAA,QAAA,EAAA,CAjBA,CAoBA;;AACA,UAAA,SAAA,KAAA,UAAA,CAAA,gBAAA,CAAA;AACA,UAAA,aAAA,OAAA,OAAA,CAAA,KAAA,EAAA;AACA,UAAA,UAAA,OAAA,UAAA,EAAA;AAGA,WAAA,UAAA,GAAA,UAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,KA7BA;AA8BA,YAAA,gBAAA,CAAA,EAAA;AACA,YAAA,sBAAA,EAAA,IAAA;AACA,KAhCA;AAiCA,aAAA,iBAAA,CAAA,EAAA;AACA,YAAA,sBAAA;AACA;AAnCA;AAnBA,CAAA","sourcesContent":["<template>\n  <div class=\"hello\">\n    hash\n    <h1>{{ msg }}</h1>\n    <p>mnemonic:{{ mnemonic }}</p>\n    <p>privateKey:{{ privateKey }}</p>\n    <button v-on:click=\"make\">make</button>\n\n    <div class=\"container\">\n        address:<input type=\"text\" v-model=\"address\">\n        <button type=\"button\"\n            v-clipboard:copy=\"address\"\n            v-clipboard:success=\"onCopy\"\n            v-clipboard:error=\"onError\">Copy!</button>\n    </div>\n    <router-link to=\"/\">\n      home\n    </router-link>\n  </div>\n</template>\n\n<script>\nimport secp256k1 from 'secp256k1/elliptic'\n\nimport crypto from 'crypto'\nimport keccak from 'keccak'\nimport bip39 from 'bip39'\nconst bitcoin = require('bitcoinjs-lib')\nexport default {\n  name: 'Bip39',\n  data () {\n    return {\n      msg: '',\n      title:'',\n      mnemonic:'',\n      privateKey:'',\n      publicKey:'',\n      address:'',\n      items:[]\n    }\n  },\n  created(){\n  },\n    mounted(){\n        this.make();\n        console.log('begin')\n    },\n  methods:{\n      make: function (event) {\n          //\n        let\n            words = bip39.generateMnemonic(),\n            password = '';\n        //1、生成一个助记词\n        this.mnemonic=words;\n\n\n        //2、该助记词使用 PBKDF2 转化为种子:\n        let seedHex = bip39.mnemonicToSeedHex(words);\n        //let seedHex = bip39.mnemonicToSeedHex(words, password);\n \n\n        // 种子用于使用 HMAC-SHA512 生成根私钥:\n        let root = bitcoin.HDNode.fromSeedHex(seedHex);\n        const rootPrv=root.toBase58();\n        const rootPub=root.neutered().toBase58();\n\n\n        // 从该根私钥，导出子私钥（参见 BIP32），其中节点布局由BIP44设置，生成派生key:\n        let child0 = root.derivePath(\"m/44'/60'/0'/0\");\n        const privateKey=child0.keyPair.toWIF();\n        const address=child0.getAddress();\n            \n\n        this.privateKey=privateKey;\n        this.address=address;\n      },\n      onCopy: function (e) {\n        alert('You just copied: ' + e.text)\n    },\n    onError: function (e) {\n        alert('Failed to copy texts')\n    },\n    \n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}