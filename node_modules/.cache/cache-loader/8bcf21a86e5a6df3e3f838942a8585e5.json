{"remainingRequest":"/Users/scott/Documents/GitHub/web/node_modules/thread-loader/dist/cjs.js!/Users/scott/Documents/GitHub/web/node_modules/babel-loader/lib/index.js!/Users/scott/Documents/GitHub/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/scott/Documents/GitHub/web/src/components/Eth.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/scott/Documents/GitHub/web/src/components/Eth.vue","mtime":1527595078265},{"path":"/Users/scott/Documents/GitHub/web/node_modules/cache-loader/dist/cjs.js","mtime":1527554738917},{"path":"/Users/scott/Documents/GitHub/web/node_modules/thread-loader/dist/cjs.js","mtime":1527554739623},{"path":"/Users/scott/Documents/GitHub/web/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/scott/Documents/GitHub/web/node_modules/vue-loader/lib/index.js","mtime":1526676097000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar bip39 = require('bip39');\n\nvar hdkey = require('ethereumjs-wallet/hdkey');\n\nvar util = require('ethereumjs-util');\n\nexport default {\n  name: 'Eth',\n  data: function data() {\n    return {\n      msg: '',\n      title: '',\n      mnemonic: '',\n      privateKey: '',\n      address: '',\n      items: []\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.make();\n    console.log('begin');\n  },\n  methods: {\n    make: function make(event) {\n      //1、生成一个助记词\n      var mnemonic = bip39.generateMnemonic();\n      this.mnemonic = mnemonic; //2、将 mnemonic code 转成 binary 的 seed\n\n      var seed = bip39.mnemonicToSeed(mnemonic);\n      /* \n      let seedHex = bip39.mnemonicToSeedHex(mnemonic);\n      */\n      //3、使用 seed 产生 HD Wallet(Master Key)\n\n      var hdWallet = hdkey.fromMasterSeed(seed); //4、获得 BIP32 Root Key\n\n      this.rootkey = hdWallet._hdkey.privateExtendedKey; //5、产生第一个Ethereum Address\n      //let key1 = hdWallet.derivePath(\"m/44'/60'/0'/0/0\");\n\n      var key1 = hdWallet.derivePath(\"m/44'/60'/0'/0\"); //6、 私钥，可以倒入imtoken钱包。\n\n      this.privateKey = key1._hdkey._privateKey.toString('hex'); //7、使用 keypair 中的公钥产生 address。\n\n      var address1 = util.pubToAddress(key1._hdkey._publicKey, true); //8、用 EIP55: Mixed-case checksum address encoding 再进行编码，得到收款地址。\n\n      address1 = util.toChecksumAddress(address1.toString('hex'));\n      this.address = address1;\n    },\n    onCopy: function onCopy(e) {\n      alert('You just copied: ' + e.text);\n    },\n    onError: function onError(e) {\n      alert('Failed to copy texts');\n    }\n  }\n};",{"version":3,"sources":["Eth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAA,QAAA,QAAA,OAAA,CAAA;;AACA,IAAA,QAAA,QAAA,yBAAA,CAAA;;AACA,IAAA,OAAA,QAAA,iBAAA,CAAA;;AACA,eAAA;AACA,QAAA,KADA;AAEA,MAFA,kBAEA;AACA,WAAA;AACA,WAAA,EADA;AAEA,aAAA,EAFA;AAGA,gBAAA,EAHA;AAIA,kBAAA,EAJA;AAKA,eAAA,EALA;AAMA,aAAA;AANA,KAAA;AAQA,GAXA;AAYA,SAZA,qBAYA,CACA,CAbA;AAcA,SAdA,qBAcA;AACA,SAAA,IAAA;AACA,YAAA,GAAA,CAAA,OAAA;AACA,GAjBA;AAkBA,WAAA;AACA,UAAA,cAAA,KAAA,EAAA;AACA;AACA,UAAA,WAAA,MAAA,gBAAA,EAAA;AACA,WAAA,QAAA,GAAA,QAAA,CAHA,CAMA;;AACA,UAAA,OAAA,MAAA,cAAA,CAAA,QAAA,CAAA;AAEA;;;AAKA;;AACA,UAAA,WAAA,MAAA,cAAA,CAAA,IAAA,CAAA,CAfA,CAiBA;;AACA,WAAA,OAAA,GAAA,SAAA,MAAA,CAAA,kBAAA,CAlBA,CAoBA;AAEA;;AACA,UAAA,OAAA,SAAA,UAAA,CAAA,gBAAA,CAAA,CAvBA,CAyBA;;AACA,WAAA,UAAA,GAAA,KAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CA1BA,CA6BA;;AACA,UAAA,WAAA,KAAA,YAAA,CAAA,KAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CA9BA,CAgCA;;AACA,iBAAA,KAAA,iBAAA,CAAA,SAAA,QAAA,CAAA,KAAA,CAAA,CAAA;AACA,WAAA,OAAA,GAAA,QAAA;AAEA,KArCA;AAsCA,YAAA,gBAAA,CAAA,EAAA;AACA,YAAA,sBAAA,EAAA,IAAA;AACA,KAxCA;AAyCA,aAAA,iBAAA,CAAA,EAAA;AACA,YAAA,sBAAA;AACA;AA3CA;AAlBA,CAAA","sourcesContent":["<template>\n  <div class=\"hello\">\n    hash\n    <h1>{{ msg }}</h1>\n    <p>mnemonic:{{ mnemonic }}</p>\n    <p>privateKey:{{ privateKey }}</p>\n    <button v-on:click=\"make\">make</button>\n\n    <div class=\"container\">\n        address:<input type=\"text\" v-model=\"address\">\n        <button type=\"button\"\n            v-clipboard:copy=\"address\"\n            v-clipboard:success=\"onCopy\"\n            v-clipboard:error=\"onError\">Copy!</button>\n    </div>\n    <router-link to=\"/\">\n      home\n    </router-link>\n  </div>\n</template>\n\n<script>\nvar bip39 = require('bip39')\nvar hdkey = require('ethereumjs-wallet/hdkey')\nvar util = require('ethereumjs-util')\nexport default {\n  name: 'Eth',\n  data () {\n    return {\n      msg: '',\n      title:'',\n      mnemonic:'',\n      privateKey:'',\n      address:'',\n      items:[]\n    }\n  },\n  created(){\n  },\n    mounted(){\n        this.make();\n        console.log('begin')\n    },\n  methods:{\n      make: function (event) {\n        //1、生成一个助记词\n        var mnemonic = bip39.generateMnemonic();\n        this.mnemonic=mnemonic;\n\n\n        //2、将 mnemonic code 转成 binary 的 seed\n        let seed = bip39.mnemonicToSeed(mnemonic);\n\n        /* \n        let seedHex = bip39.mnemonicToSeedHex(mnemonic);\n        */\n        \n\n        //3、使用 seed 产生 HD Wallet(Master Key)\n        let hdWallet = hdkey.fromMasterSeed(seed);\n\n        //4、获得 BIP32 Root Key\n        this.rootkey=hdWallet._hdkey.privateExtendedKey;\n        \n        //5、产生第一个Ethereum Address\n        \n        //let key1 = hdWallet.derivePath(\"m/44'/60'/0'/0/0\");\n        let key1 = hdWallet.derivePath(\"m/44'/60'/0'/0\");\n\n        //6、 私钥，可以倒入imtoken钱包。\n        this.privateKey=key1._hdkey._privateKey.toString('hex');\n    \n\n        //7、使用 keypair 中的公钥产生 address。\n        let address1 = util.pubToAddress(key1._hdkey._publicKey, true);\n\n        //8、用 EIP55: Mixed-case checksum address encoding 再进行编码，得到收款地址。\n        address1 = util.toChecksumAddress(address1.toString('hex'));\n        this.address=address1;\n\n      },\n      onCopy: function (e) {\n        alert('You just copied: ' + e.text)\n    },\n    onError: function (e) {\n        alert('Failed to copy texts')\n    },\n    \n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}