'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TimeDisplay = require('./TimeDisplay');

var _TimeDisplay2 = _interopRequireDefault(_TimeDisplay);

var _Hours = require('./Hours');

var _Hours2 = _interopRequireDefault(_Hours);

var _Minutes = require('./Minutes');

var _Minutes2 = _interopRequireDefault(_Minutes);

var _color = require('../internal/mixins/color');

var _color2 = _interopRequireDefault(_color);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'mu-time-picker',
  provide: function provide() {
    return {
      getColorObject: this.getColorObject
    };
  },

  mixins: [_color2.default],
  props: {
    format: {
      type: String,
      default: 'ampm',
      validator: function validator(val) {
        return ['ampm', '24hr'].indexOf(val) !== -1;
      }
    },
    time: {
      type: Date,
      default: function _default() {
        return new Date();
      }
    },
    noDisplay: Boolean,
    landscape: Boolean
  },
  data: function data() {
    return {
      mode: 'hour'
    };
  },

  methods: {
    getColorObject: function getColorObject() {
      return {
        color: this.getColor(this.color),
        colorClass: this.getNormalColorClass(this.color, true),
        bgColorClass: this.getNormalColorClass(this.color)
      };
    },
    getAffix: function getAffix() {
      if (this.format !== 'ampm') return '';
      var hours = this.time.getHours();
      if (hours < 12) {
        return 'am';
      }
      return 'pm';
    },
    handleSelectAffix: function handleSelectAffix(affix) {
      if (affix === this.getAffix()) return;
      var hours = this.time.getHours();
      if (affix === 'am') {
        this.handleChangeHours(hours - 12, affix);
        return;
      }
      this.handleChangeHours(hours + 12, affix);
    },
    handleChangeHours: function handleChangeHours(hours, finished) {
      var time = new Date(this.time);
      var affix = void 0;
      if (typeof finished === 'string') {
        affix = finished;
        finished = undefined;
      }
      if (!affix) {
        affix = this.getAffix();
      }
      if (affix === 'pm' && hours < 12) {
        hours += 12;
      }
      time.setHours(hours);
      this.changeTime(time, 'hour', finished);
      if (finished) this.mode = 'minute';
    },
    handleChangeMinutes: function handleChangeMinutes(minutes, finished) {
      var time = new Date(this.time);
      time.setMinutes(minutes);
      this.changeTime(time, 'minute', finished);
      if (finished) this.mode = 'hour';
    },
    changeTime: function changeTime(time, mode, finished) {
      this.$emit('change', time, mode, finished);
      this.$emit('update:time', time);
    }
  },
  render: function render(h) {
    var _this = this;

    var _getColorObject = this.getColorObject(),
        color = _getColorObject.color,
        colorClass = _getColorObject.colorClass;

    return h('div', {
      staticClass: 'mu-timepicker ' + colorClass,
      style: {
        color: color
      },
      class: {
        'mu-timepicker-landspace': this.landscape
      }
    }, [!this.noDisplay ? h(_TimeDisplay2.default, {
      props: {
        selectedTime: this.time,
        format: this.format,
        mode: this.mode,
        affix: this.getAffix()
      },
      on: {
        selectMin: function selectMin() {
          _this.mode = 'minute';
        },
        selectHour: function selectHour() {
          _this.mode = 'hour';
        },
        selectAffix: this.handleSelectAffix
      }
    }) : undefined, h('div', {
      staticClass: 'mu-timepicker-container',
      class: {
        'mu-timepicker-container__action': this.$slots.default && this.$slots.default.length > 0
      }
    }, [h('div', { staticClass: 'mu-timepicker-circle' }), this.mode === 'hour' ? h(_Hours2.default, {
      props: {
        format: this.format,
        initialHours: this.time.getHours()
      },
      on: {
        change: this.handleChangeHours
      }
    }) : undefined, this.mode === 'minute' ? h(_Minutes2.default, {
      props: {
        initialMinutes: this.time.getMinutes()
      },
      on: {
        change: this.handleChangeMinutes
      }
    }) : undefined]), this.$slots.default]);
  }
};